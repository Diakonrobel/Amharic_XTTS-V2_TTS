#!/usr/bin/env python3
"""
Interactive Demo for Enhanced Amharic G2P System

Showcases the comprehensive Ethiopic grapheme-to-phoneme conversion
with full phonological rule application.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../..'))

from amharic_tts.g2p.amharic_g2p_enhanced import EnhancedAmharicG2P
from amharic_tts.g2p.ethiopic_g2p_table import get_table_stats


def print_header():
    """Print demo header"""
    print("=" * 80)
    print("üá™üáπ  AMHARIC G2P SYSTEM - INTERACTIVE DEMO  üá™üáπ")
    print("=" * 80)
    print()


def print_table_stats():
    """Display G2P table statistics"""
    stats = get_table_stats()
    
    print("üìä G2P Table Coverage:")
    print("-" * 80)
    print(f"  Total Mappings:       {stats['total_mappings']}")
    print(f"  Consonant Series:     {stats['consonant_series']}")
    print(f"  Labiovelar Forms:     {stats['labiovelar_forms']}")
    print(f"  Punctuation Marks:    {stats['punctuation_marks']}")
    print(f"  Coverage:             {stats['coverage']}")
    print()


def demo_basic_words(g2p):
    """Demonstrate basic word conversions"""
    print("üìù Basic Word Conversions:")
    print("-" * 80)
    
    examples = [
        ("·à∞·àã·àù", "Peace/Hello"),
        ("·ä†·àõ·à≠·äõ", "Amharic language"),
        ("·ä¢·âµ·ãÆ·åµ·ã´", "Ethiopia"),
        ("·ä†·ã≤·àµ ·ä†·â†·â£", "Addis Ababa"),
        ("·àµ·çñ·à≠·âµ", "Sport"),
    ]
    
    for amharic, meaning in examples:
        phonemes = g2p.convert(amharic)
        print(f"  {amharic:15} ‚Üí {phonemes:25} ({meaning})")
    print()


def demo_vowel_orders(g2p):
    """Demonstrate all 7 vowel orders"""
    print("üî§ Seven Vowel Orders (using ·àà-series):")
    print("-" * 80)
    
    orders = [
        ("·àà", "1st order (…ô)", "l…ô"),
        ("·àâ", "2nd order (u)", "lu"),
        ("·àä", "3rd order (i)", "li"),
        ("·àã", "4th order (a)", "la"),
        ("·àå", "5th order (e)", "le"),
        ("·àç", "6th order (…®)", "l…®"),
        ("·àé", "7th order (o)", "lo"),
    ]
    
    for char, description, expected in orders:
        result = g2p.convert(char)
        check = "‚úÖ" if expected in result else "‚ö†Ô∏è"
        print(f"  {char}  {description:20} ‚Üí {result:10} {check}")
    print()


def demo_ejectives(g2p):
    """Demonstrate ejective consonants"""
    print("üí• Ejective Consonants (unique to Amharic):")
    print("-" * 80)
    
    examples = [
        ("·å†·äì", "t º - ejective t", "Health/wellness"),
        ("·å®·à≠·âÖ", "t É º - ejective ch", "Cloth"),
        ("·å∏·àê·ã≠", "s º - ejective s", "Sun"),
        ("·å∞·à´·à™", "p º - ejective p", "Louse"),
    ]
    
    for word, phoneme_desc, meaning in examples:
        result = g2p.convert(word)
        has_ejective = " º" in result
        check = "‚úÖ" if has_ejective else "‚ö†Ô∏è"
        print(f"  {word:10} ‚Üí {result:20} {check} ({phoneme_desc} - {meaning})")
    print()


def demo_labiovelars(g2p):
    """Demonstrate labiovelar consonants"""
    print("üåê Labiovelar Consonants:")
    print("-" * 80)
    
    examples = [
        ("·âã·äï·âã", "q ∑ - labialized q", "Language"),
        ("·ä≥·àµ", "k ∑ - labialized k", "Ball"),
        ("·åì·ã∞·äõ", "g ∑ - labialized g", "Friend"),
    ]
    
    for word, phoneme_desc, meaning in examples:
        result = g2p.convert(word)
        has_labiovelar = " ∑" in result
        check = "‚úÖ" if has_labiovelar else "‚ö†Ô∏è"
        print(f"  {word:10} ‚Üí {result:20} {check} ({phoneme_desc} - {meaning})")
    print()


def demo_epenthesis(g2p):
    """Demonstrate epenthetic vowel insertion"""
    print("üîÑ Epenthesis (…® insertion):")
    print("-" * 80)
    
    examples = [
        ("·ä≠·â•·à≠", "Honor/respect (k-b-r cluster)"),
        ("·âµ·åç·à´·ã≠", "Tigray region (t-g-r cluster)"),
        ("·â•·à≠·àÉ·äï", "Light/brightness (multiple clusters)"),
        ("·àµ·çñ·à≠·âµ", "Sport (loan word with clusters)"),
    ]
    
    for word, description in examples:
        result = g2p.convert(word)
        epenthesis_count = result.count("…®")
        print(f"  {word:10} ‚Üí {result:25} ({epenthesis_count} …® insertions - {description})")
    print()


def demo_palatal_nasal(g2p):
    """Demonstrate palatal nasal (unique phoneme)"""
    print("üëÑ Palatal Nasal (…≤ - unique to Amharic):")
    print("-" * 80)
    
    examples = [
        ("·ä†·àõ·à≠·äõ", "Amharic language"),
        ("·äõ", "Our (possessive suffix)"),
        ("·àù·äû·âµ", "Wish/desire"),
    ]
    
    for word, meaning in examples:
        result = g2p.convert(word)
        has_palatal = "…≤" in result
        check = "‚úÖ" if has_palatal else "‚ö†Ô∏è"
        print(f"  {word:10} ‚Üí {result:25} {check} ({meaning})")
    print()


def demo_phrases(g2p):
    """Demonstrate phrase conversions"""
    print("üí¨ Phrase Conversions:")
    print("-" * 80)
    
    phrases = [
        ("·à∞·àã·àù ·äê·ãç", "It is peace / Greetings"),
        ("·àò·àç·ä´·àù ·âÄ·äï", "Good day"),
        ("·ä•·äï·ã¥·âµ ·äê·àÖ", "How are you? (masculine)"),
        ("·ä•·äï·ã¥·âµ ·äê·àΩ", "How are you? (feminine)"),
        ("·ä†·àò·à∞·åç·äì·àà·àÅ", "Thank you"),
    ]
    
    for phrase, meaning in phrases:
        result = g2p.convert(phrase)
        print(f"  {phrase:15} ‚Üí {result}")
        print(f"  {' ' * 17} ({meaning})")
        print()


def demo_punctuation(g2p):
    """Demonstrate Ethiopic punctuation"""
    print("üìç Ethiopic Punctuation:")
    print("-" * 80)
    
    examples = [
        ("·à∞·àã·àù·ç¢", "Full stop (·ç¢)"),
        ("·à∞·àã·àù·ç£ ·ä•·äï·ã¥·âµ ·äê·àÖ·çß", "Comma (·ç£) and question mark (·çß)"),
        ("·ä†·äï·ãµ·ç£ ·àÅ·àà·âµ·ç£ ·à∂·àµ·âµ·ç¢", "One, two, three."),
    ]
    
    for text, description in examples:
        result = g2p.convert(text)
        print(f"  {text:25} ‚Üí {result}")
        print(f"  {' ' * 27} ({description})")
        print()


def interactive_mode(g2p):
    """Interactive conversion mode"""
    print("‚úèÔ∏è  Interactive Mode:")
    print("-" * 80)
    print("Enter Amharic text to convert (or 'quit' to exit)")
    print()
    
    while True:
        try:
            text = input("Amharic> ").strip()
            
            if text.lower() in ['quit', 'exit', 'q']:
                print("üëã Goodbye!")
                break
            
            if not text:
                continue
            
            result = g2p.convert(text)
            print(f"IPA>     {result}")
            print()
            
        except KeyboardInterrupt:
            print("\nüëã Goodbye!")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")
            print()


def main():
    """Main demo function"""
    print_header()
    
    # Initialize G2P converter
    print("üîß Initializing Enhanced Amharic G2P System...")
    g2p = EnhancedAmharicG2P()
    print("‚úÖ Initialization complete!\n")
    
    # Show table statistics
    print_table_stats()
    
    # Run demonstrations
    demo_basic_words(g2p)
    demo_vowel_orders(g2p)
    demo_ejectives(g2p)
    demo_labiovelars(g2p)
    demo_epenthesis(g2p)
    demo_palatal_nasal(g2p)
    demo_phrases(g2p)
    demo_punctuation(g2p)
    
    # Interactive mode
    print()
    try:
        interactive_mode(g2p)
    except Exception as e:
        print(f"‚ùå Error in interactive mode: {e}")
    
    print()
    print("=" * 80)
    print("‚úÖ Demo complete! Check docs/AMHARIC_G2P_PHASE3.md for full documentation.")
    print("=" * 80)


if __name__ == "__main__":
    main()
